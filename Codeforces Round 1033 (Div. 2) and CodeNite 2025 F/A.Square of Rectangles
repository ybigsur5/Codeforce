use std::io::{self, BufRead};
 
fn can_form_square(rects: &[(i32, i32); 3]) -> bool {
    let mut perms = vec![
        [rects[0], rects[1], rects[2]],
        [rects[0], rects[2], rects[1]],
        [rects[1], rects[0], rects[2]],
        [rects[1], rects[2], rects[0]],
        [rects[2], rects[0], rects[1]],
        [rects[2], rects[1], rects[0]],
    ];
 
    for p in perms.iter_mut() {
        let (w1, h1) = p[0];
        let (w2, h2) = p[1];
        let (w3, h3) = p[2];
 
        if h1 == h2 && h2 == h3 && w1 + w2 + w3 == h1 {
            return true;
        }
        if w1 == w2 && w2 == w3 && h1 + h2 + h3 == w1 {
            return true;
        }
        if w2 + w3 == w1 && h2 == h3 && h1 + h2 == w1 {
            return true;
        }
        if h2 + h3 == h1 && w2 == w3 && w1 + w2 == h1 {
            return true;
        }
    }
    false
}
 
fn main() {
    let stdin = io::stdin();
    let mut lines = stdin.lock().lines();
 
    let t: usize = lines.next().unwrap().unwrap().trim().parse().unwrap();
 
    for _ in 0..t {
        let line = lines.next().unwrap().unwrap();
        let nums: Vec<i32> = line
            .split_whitespace()
            .map(|x| x.parse::<i32>().unwrap())
            .collect();
 
        let rects = [
            (nums[0], nums[1]),
            (nums[2], nums[3]),
            (nums[4], nums[5]),
        ];
 
        if can_form_square(&rects) {
            println!("YES");
        } else {
            println!("NO");
        }
    }
}
